services:
  redis:
    container_name: redis
    image: "redis/redis-stack-server:latest"
    restart: on-failure

  twitch-chat:
    container_name: twitch-chat
    restart: on-failure
    build:
      context: .
      dockerfile: $CWD/packages/Dockerfile.chat
      args:
        - NODE_ENV=${NODE_ENV:-development}
    hostname: twitch-chat
    environment:
      - NEW_RELIC_NO_CONFIG_FILE
      - NEW_RELIC_DISTRIBUTED_TRACING_ENABLED
      - NEW_RELIC_APP_NAME=twitch-chat
      - NEW_RELIC_ENABLED
      - NEW_RELIC_APPLICATION_LOGGING_FORWARDING_ENABLED
      - NEW_RELIC_LOG=stdout
      - NEW_RELIC_LICENSE_KEY
      - DATABASE_URL
      - DB_SECRET
      - DB_URL
      - DEV_CHANNELS
      - DEV_CHANNELIDS
      - MONGO_URL
      - NODE_ENV
      - TWITCH_BOT_PROVIDERID
      - TWITCH_CLIENT_ID
      - TWITCH_CLIENT_SECRET
    volumes:
      - $CWD/packages/twitch/chat/locales:/app/packages/twitch/chat/locales

  steam:
    container_name: steam
    restart: on-failure
    build:
      context: .
      dockerfile: $CWD/packages/Dockerfile.steam
      args:
        - NODE_ENV=${NODE_ENV:-development}
    hostname: steam
    environment:
      - NEW_RELIC_NO_CONFIG_FILE
      - NEW_RELIC_DISTRIBUTED_TRACING_ENABLED
      - NEW_RELIC_APP_NAME=steam
      - NEW_RELIC_ENABLED
      - NEW_RELIC_APPLICATION_LOGGING_FORWARDING_ENABLED
      - NEW_RELIC_LOG=stdout
      - NEW_RELIC_LICENSE_KEY
      - MONGO_URL
      - STEAM_PASS
      - STEAM_USER
      - STEAM_WEB_API
      - NODE_ENV

  twitch-events:
    container_name: twitch-events
    restart: on-failure
    build:
      context: .
      dockerfile: $CWD/packages/Dockerfile.events
      args:
        - NODE_ENV=${NODE_ENV:-development}
    hostname: twitch-events
    environment:
      - NEW_RELIC_NO_CONFIG_FILE
      - NEW_RELIC_DISTRIBUTED_TRACING_ENABLED
      - NEW_RELIC_APP_NAME=twitch-events
      - NEW_RELIC_ENABLED
      - NEW_RELIC_APPLICATION_LOGGING_FORWARDING_ENABLED
      - NEW_RELIC_LOG=stdout
      - NEW_RELIC_LICENSE_KEY
      - DATABASE_URL
      - DB_SECRET
      - DB_URL
      - DEV_CHANNELS
      - DEV_CHANNELIDS
      - EVENTSUB_HOST
      - HOOKS_HOST
      - MONGO_URL
      - NODE_ENV
      - TWITCH_CLIENT_ID
      - TWITCH_CLIENT_SECRET
      - TWITCH_EVENTSUB_SECRET

  dota:
    container_name: dota
    restart: on-failure
    build:
      context: .
      dockerfile: $CWD/packages/Dockerfile.dota
      args:
        - NODE_ENV=${NODE_ENV:-development}

    hostname: dota
    # ports:
    # - "9229:9229" # just in case we want to enable node inspecting
    environment:
      - D2PT_TOKEN
      - ADMIN_CHANNELS
      - COMMIT_HASH
      - DATABASE_URL
      - DB_SECRET
      - DB_URL
      - DEV_CHANNELS
      - DEV_CHANNELIDS
      - MONGO_URL
      - NEW_RELIC_NO_CONFIG_FILE
      - NEW_RELIC_DISTRIBUTED_TRACING_ENABLED
      - NEW_RELIC_APP_NAME
      - NEW_RELIC_ENABLED
      - NEW_RELIC_APPLICATION_LOGGING_FORWARDING_ENABLED
      - NEW_RELIC_LOG=stdout
      - NEW_RELIC_LICENSE_KEY
      - NODE_ENV
      - STEAM_WEB_API
      - STRATZ_TOKEN
      - TWITCH_BOT_PROVIDERID
      - TWITCH_CLIENT_ID
      - TWITCH_CLIENT_SECRET
    volumes:
      # Storing locales in a volume so that they can be edited without rebuilding the image
      - $CWD/packages/dota/locales:/app/packages/dota/locales
      - steam_auth:/app/packages/dota/src/steam/volumes

  mongodb:
    container_name: mongodb
    image: "mongo:latest"
    volumes:
      - "mongodb_data:/data/db"
      - $CWD/services/mongodb/src/init.js:/docker-entrypoint-initdb.d/init_mongo.js

# Volumes are useful for data persistence, so the data will not be deleted
# even later you call command docker-compose down.
volumes:
  mongodb_data:
  steam_auth:
networks:
  default:
    name: dotabod
